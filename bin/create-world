#!/usr/bin/env php
<?php
declare(strict_types = 1);

require_once __DIR__ . '/../bootstrap.php';

use PhpMud\Fixture\AreaFixture;
use PhpMud\Fixture\ItemFixture;
use PhpMud\Fixture\MobFixture;
use PhpMud\Fixture\RoomFixture;
use PhpMud\Entity\Affect;
use PhpMud\Entity\Area;
use PhpMud\Entity\Attributes;
use PhpMud\Entity\Direction;
use PhpMud\Entity\Inventory;
use PhpMud\Entity\Item;
use PhpMud\Entity\Mob;
use PhpMud\Entity\Room;
use PhpMud\Enum\Material;
use PhpMud\Enum\Role;
use PhpMud\Enum\Position;
use PhpMud\Direction\West;
use PhpMud\Direction\East;
use PhpMud\Race\Dwarf;
use PhpMud\Race\Human;
use PhpMud\Race\Race;

$tool = new \Doctrine\ORM\Tools\SchemaTool($em);
$classes = [
    $em->getClassMetadata(Affect::class),
    $em->getClassMetadata(Area::class),
    $em->getClassMetadata(Attributes::class),
    $em->getClassMetadata(Direction::class),
    $em->getClassMetadata(Inventory::class),
    $em->getClassMetadata(Item::class),
    $em->getClassMetadata(Mob::class),
    $em->getClassMetadata(Room::class)
];

$log->info('drop schema');
$tool->dropSchema($classes);

$log->info('create schema');
$tool->createSchema($classes);

function area(string $name): AreaFixture {
    return new AreaFixture(new Area($name));
}

function room(string $name, string $description): RoomFixture {
    return new RoomFixture(new Room(
        $name, $description
    ));
}

function mob(string $name, Race $race): MobFixture {
    return new MobFixture(new Mob(
        $name, $race
    ));
}

function item(string $name, Material $material, array $identifiers): ItemFixture {
    return new ItemFixture(new Item(
        $name, $material, $identifiers
    ));
}

$area = area('Midgaard');

$firstRoom = $area->addRoom(
    room(
        'Midgaard Town Center',
        'Before you is the town center.'
    )
    ->addItems([
        item(
            'a copper teapot',
            Material::COPPER(),
            ['copper', 'teapot']
        )->setWeight(0.5)->getInstance(),
        item(
            'a wooden sword',
            Material::WOOD(),
            ['wooden', 'sword']
        )->setPosition(Position::WIELDED())->setWeight(4.0)->getInstance(),
        item(
            'a wooden mace',
            Material::WOOD(),
            ['wooden', 'mace']
        )->setPosition(Position::WIELDED())->setWeight(5.0)->getInstance(),
    ])
    ->addMob(
        mob(
            'a janitor',
            new Human()
        )->addRole(Role::SCAVENGER())->getInstance()
    )
    ->addRoom(
        new West(),
        room(
            'Arms and Armour',
            '  A cramped armory is filled with cheap but sturdy training equipment. A red-hot forge
and workshop consume the back half of the already small space. A silhouette of a dwarf
can be seen in front of the forge, hammering out new weapons and armor.'
        )
        ->setArea($area->getInstance())
        ->addMob(
            mob(
                'A dwarven armorer',
                new Dwarf()
            )
            ->setLook('A stout dwarf totters around, stinking up the place.')
            ->addRole(Role::SHOPKEEPER())
            ->addItem(
                item(
                    'a small brass key',
                    Material::BRASS(),
                    ['small', 'brass', 'key']
                )
                ->setValue(20)
                ->setWeight(0.1)
                ->getInstance()
            )
            ->getInstance()
        )
    )
    ->addRoom(
        new East(),
        room(
            'A bakery',
            '  A bakery shop is here.'
        )
        ->setArea($area->getInstance())
        ->addMob(
            mob(
                'a baker',
                new Human()
            )
            ->setLook('standing behind the counter, %s wipes flour from his forehead.')
            ->addRole(Role::SHOPKEEPER())
            ->addItem(
                item(
                    'a loaf of bread',
                    Material::FOOD(),
                    ['loaf', 'bread']
                )
                ->setValue(4)
                ->setWeight(0.2)
                ->getInstance()
            )
            ->getInstance()
        )
    )
)->getInstance()->getRooms()->first();

$log->info('persist initial fixtures');

$em->persist($firstRoom);
$em->flush();
